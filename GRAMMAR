NONTERMINALS
============

PROGRAM := { STATEMENT }, { NEWLINE } ;


STATEMENT := LANGUAGE-DEFINITION | STRING-DEFINITION ;


LANGUAGE-DEFINITION := SYMBOL, DEFINE, SET-EXPRESSION, NEWLINE ;
STRING-DEFINITION   := SYMBOL, DEFINE, STRING-EXPRESSION, IN, SYMBOL, NEWLINE ;


SET-EXPRESSION         := UNION-EXPRESSION ;
UNION-EXPRESSION       := INTERSECT-EXPRESSION, { UNION, UNION-EXPRESSION } ;
INTERSECT-EXPRESSION   := PRODUCT-EXPRESSION, { INTERSECT, INTERSECT-EXPRESSION } ;
PRODUCT-EXPRESSION     := DIFFERENCE-EXPRESSION, { PRODUCT, PRODUCT-EXPRESSION } ;
DIFFERENCE-EXPRESSION  := COMPLEMENT-EXPRESSION, DIFFERENCE, SET-EXPRESSION ;
COMPLEMENT-EXPRESSION  := COMPLEMENT, PARENTHESIS-EXPRESSION ;
PARENTHESIS-EXPRESSION := LEFT-PARENTHESIS, SET-EXPRESSION, RIGHT-PARENTHESIS
                        | SET
                        | SYMBOL ;


SET := LEFT-BRACE, EXPRESSION-LIST, RIGHT-BRACE
     | EMPTY-SET ;


STRING-EXPRESSION        := CONCATENATION-EXPRESSION ;
CONCATENATION-EXPRESSION := STRING, { PLUS, CONCATENATION-EXPRESSION } ;


STRING := BIT, { BIT }
        | EMPTY-STRING ;


EXPRESSION-LIST      := EXPRESSION, { EXPRESSION-MORE } ;
EXPRESSION-LIST-MORE := COMMA, EXPRESSION ;


EXPRESSION := SET-EXPRESSION
            | STRING-EXPRESSION ;


TERMINALS
=========

NEWLINE           := ? newline character ? ;
SYMBOL            := ? non-empty sequence of non-whitespace characters ? ;
DEFINE            := ":=" ;
IN                := "∈" ;
UNION             := "∪" ;
INTERSECT         := "∩" ;
PRODUCT           := "×" ;
DIFFERENCE        := "-" ;
COMPLEMENT        := "¬" ;
LEFT-PARENTHESIS  := "(" ;
RIGHT-PARENTHESIS := ")" ;
LEFT-BRACE        := "{" ;
RIGHT-BRACE       := "}" ;
EMPTY-SET         := "∅" ;
EMPTY-STRING      := "ε" ;
COMMA             := "," ;
BIT               := "0" | "1" ;
